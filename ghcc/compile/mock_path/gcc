#!/usr/bin/env python
r"""A fake gcc implementation which records input/output files, adds -O0 flag, and then calls real gcc.
"""
import argparse
import os
import subprocess
import sys


def filter_filenames(args):
    return [arg for arg in args if arg.endswith('.c') or arg.endswith('.h')]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o')
    parser.add_argument('-c', action='store_true')
    parser.add_argument('-O', nargs='?')
    parser.add_argument('-Wall', action='store_true')
    parser.add_argument('-mabi')  # ignored
    parser.add_argument('-march')  # ignored
    parser.add_argument('-mtune')  # ignored
    parser.add_argument('-mlittle-endian', action='store_true')  # ignored
    parser.add_argument('-mapcs', action='store_true')  # ignored
    parser.add_argument('-mno-sched-prolog', action='store_true')  # ignored
    args, unknown_args = parser.parse_known_args(sys.argv[1:])

    filenames = filter_filenames(unknown_args)
    out_file = None
    if args.o:
        out_file = args.o
    elif args.c:
        for f in filenames:
            if f.endswith('.c'):
                out_file = os.path.splitext(f)[0] + ".o"
    if out_file is None:
        out_file = 'a.out'

    known_args = []
    if args.c:
        known_args.append("-c")

    try:
        gcc = "gcc"  # "gcc-4.7"
        # When multiple -O options are specified, the last one takes precedence.
        gcc_args = ["/usr/bin/" + gcc] + known_args + unknown_args + ["-o", out_file, "-O0", "-g"]
        sys.stderr.write("Mock GCC: " + ' '.join(gcc_args) + "\n")
        # Redirecting to a pipe could prevent GCC producing colored output.
        process = subprocess.Popen(gcc_args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        process.wait()
        output = process.stdout.read().decode('utf-8')
        sys.stderr.write(output)
        if process.returncode != 0:
            sys.stderr.write(f"Return code: {process.returncode}\n")
            exit(process.returncode)
    except Exception as e:
        sys.stderr.write(f"Mock GCC: Exception: {e}\n")
        exit(2)


if __name__ == "__main__":
    main()
