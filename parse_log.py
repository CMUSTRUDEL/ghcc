r"""Parse logs generated by the pipeline and write to the database.

This is to make use of the repositories cloned before the database and compilation parts were implemented :/
"""

import argparse
import contextlib
import os
import subprocess
from typing import List, Tuple

import tqdm

import ghcc
from ghcc.database import Database

parser = argparse.ArgumentParser()
parser.add_argument("--log-file", type=str, default="clone-log.txt")
parser.add_argument("--clone-folder", type=str, default="c_repos/")  # where cloned repositories are stored
args = parser.parse_args()


def get_repo(msg: List[str]) -> Tuple[str, str]:
    for s in msg:
        if '/' in s:
            parts = s.split('/')
            if len(parts) == 2:
                return parts[0], parts[1]
    raise ValueError(f"Cannot find repository name in message: '{' '.join(msg)}'")


def main() -> None:
    total_lines = ghcc.utils.get_folder_size(args.log_file)
    with contextlib.closing(Database()) as db, open(args.log_file, "r") as f:
        for line_no, line in enumerate(tqdm.tqdm(f, total=total_lines)):
            if not line:
                continue
            parts = line.split()
            _date, _time, status, *msg = parts
            try:
                repo_owner, repo_name = get_repo(msg)
            except ValueError as e:
                print(f"Line {line_no + 1}: Cannot find repo name in '{line.strip()}'")
                continue
            if status == "INFO:" and "successfully" in msg:
                size = ghcc.utils.get_folder_size(os.path.join(args.clone_folder, repo_owner, repo_name))
                db.add_repo(repo_owner, repo_name, clone_successful=True, repo_size=size)
            else:
                db.add_repo(repo_owner, repo_name, clone_successful=False)


if __name__ == '__main__':
    ghcc.utils.register_ipython_excepthook()
    main()
